name: Rust

on:
  push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2

    - uses: fwilhe2/setup-kotlin@main
      with:
        version: 1.4.30
        install-native: false

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Install
      run: cargo install --path .

    - run: localcirunner version

    - run: localcirunner run azure.yaml
      working-directory: test_data

    - name: Check if compiled binary exists
      run: |
          val f = java.io.File("test_data/Main.class")
          if (!f.exists()) {
            throw RuntimeException("expected output file does not exist")
          }
          f.delete()
      shell: kotlin -howtorun .main.kts {0}

    - run: localcirunner run gh.yaml
      working-directory: test_data

    - name: Check if compiled binary exists
      run: |
        val f = java.io.File("test_data/Main.class")
        if (!f.exists()) {
          throw RuntimeException("expected output file does not exist")
        }
        f.delete()
      shell: kotlin -howtorun .main.kts {0}

    - name: Build
      run: cargo build --release --verbose

    - run: find target/release
      shell: bash

    - name: Upload release binary
      run: cp target/release/localcirunner localcirunner-linux; gh release upload "0.1.0" "localcirunner-linux" --clobber
      if: matrix.os == 'ubuntu-20.04' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release binary
      run: cp target/release/localcirunner localcirunner-macos; gh release upload "0.1.0" "localcirunner-macos" --clobber
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release binary
      run: gh release upload "0.1.0" "target/release/localcirunner.exe" --clobber
      if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
